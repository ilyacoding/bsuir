//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Database {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Database.IDatabase")]
    public interface IDatabase {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/Save", ReplyAction="http://tempuri.org/IDatabase/SaveResponse")]
        void Save();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/Save", ReplyAction="http://tempuri.org/IDatabase/SaveResponse")]
        System.Threading.Tasks.Task SaveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/Load", ReplyAction="http://tempuri.org/IDatabase/LoadResponse")]
        void Load();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/Load", ReplyAction="http://tempuri.org/IDatabase/LoadResponse")]
        System.Threading.Tasks.Task LoadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/GetData", ReplyAction="http://tempuri.org/IDatabase/GetDataResponse")]
        string GetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/GetData", ReplyAction="http://tempuri.org/IDatabase/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddUser", ReplyAction="http://tempuri.org/IDatabase/AddUserResponse")]
        int AddUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddUser", ReplyAction="http://tempuri.org/IDatabase/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddCategory", ReplyAction="http://tempuri.org/IDatabase/AddCategoryResponse")]
        int AddCategory(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddCategory", ReplyAction="http://tempuri.org/IDatabase/AddCategoryResponse")]
        System.Threading.Tasks.Task<int> AddCategoryAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddGood", ReplyAction="http://tempuri.org/IDatabase/AddGoodResponse")]
        int AddGood(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddGood", ReplyAction="http://tempuri.org/IDatabase/AddGoodResponse")]
        System.Threading.Tasks.Task<int> AddGoodAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveUser", ReplyAction="http://tempuri.org/IDatabase/RemoveUserResponse")]
        bool RemoveUser(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveUser", ReplyAction="http://tempuri.org/IDatabase/RemoveUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveCategory", ReplyAction="http://tempuri.org/IDatabase/RemoveCategoryResponse")]
        bool RemoveCategory(int CatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveCategory", ReplyAction="http://tempuri.org/IDatabase/RemoveCategoryResponse")]
        System.Threading.Tasks.Task<bool> RemoveCategoryAsync(int CatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveGood", ReplyAction="http://tempuri.org/IDatabase/RemoveGoodResponse")]
        bool RemoveGood(int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveGood", ReplyAction="http://tempuri.org/IDatabase/RemoveGoodResponse")]
        System.Threading.Tasks.Task<bool> RemoveGoodAsync(int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddCatToUser", ReplyAction="http://tempuri.org/IDatabase/AddCatToUserResponse")]
        bool AddCatToUser(int UserId, int CatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddCatToUser", ReplyAction="http://tempuri.org/IDatabase/AddCatToUserResponse")]
        System.Threading.Tasks.Task<bool> AddCatToUserAsync(int UserId, int CatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddGoodToUser", ReplyAction="http://tempuri.org/IDatabase/AddGoodToUserResponse")]
        bool AddGoodToUser(int UserId, int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddGoodToUser", ReplyAction="http://tempuri.org/IDatabase/AddGoodToUserResponse")]
        System.Threading.Tasks.Task<bool> AddGoodToUserAsync(int UserId, int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddGoodToCat", ReplyAction="http://tempuri.org/IDatabase/AddGoodToCatResponse")]
        bool AddGoodToCat(int CatId, int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddGoodToCat", ReplyAction="http://tempuri.org/IDatabase/AddGoodToCatResponse")]
        System.Threading.Tasks.Task<bool> AddGoodToCatAsync(int CatId, int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddCatToGood", ReplyAction="http://tempuri.org/IDatabase/AddCatToGoodResponse")]
        bool AddCatToGood(int GoodId, int CatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/AddCatToGood", ReplyAction="http://tempuri.org/IDatabase/AddCatToGoodResponse")]
        System.Threading.Tasks.Task<bool> AddCatToGoodAsync(int GoodId, int CatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveCatFromUser", ReplyAction="http://tempuri.org/IDatabase/RemoveCatFromUserResponse")]
        bool RemoveCatFromUser(int UserId, int CatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveCatFromUser", ReplyAction="http://tempuri.org/IDatabase/RemoveCatFromUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveCatFromUserAsync(int UserId, int CatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveGoodFromUser", ReplyAction="http://tempuri.org/IDatabase/RemoveGoodFromUserResponse")]
        bool RemoveGoodFromUser(int UserId, int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveGoodFromUser", ReplyAction="http://tempuri.org/IDatabase/RemoveGoodFromUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveGoodFromUserAsync(int UserId, int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveGoodFromCat", ReplyAction="http://tempuri.org/IDatabase/RemoveGoodFromCatResponse")]
        bool RemoveGoodFromCat(int CatId, int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveGoodFromCat", ReplyAction="http://tempuri.org/IDatabase/RemoveGoodFromCatResponse")]
        System.Threading.Tasks.Task<bool> RemoveGoodFromCatAsync(int CatId, int GoodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveCatFromGood", ReplyAction="http://tempuri.org/IDatabase/RemoveCatFromGoodResponse")]
        bool RemoveCatFromGood(int GoodId, int CatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabase/RemoveCatFromGood", ReplyAction="http://tempuri.org/IDatabase/RemoveCatFromGoodResponse")]
        System.Threading.Tasks.Task<bool> RemoveCatFromGoodAsync(int GoodId, int CatId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseChannel : Client.Database.IDatabase, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseClient : System.ServiceModel.ClientBase<Client.Database.IDatabase>, Client.Database.IDatabase {
        
        public DatabaseClient() {
        }
        
        public DatabaseClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Save() {
            base.Channel.Save();
        }
        
        public System.Threading.Tasks.Task SaveAsync() {
            return base.Channel.SaveAsync();
        }
        
        public void Load() {
            base.Channel.Load();
        }
        
        public System.Threading.Tasks.Task LoadAsync() {
            return base.Channel.LoadAsync();
        }
        
        public string GetData() {
            return base.Channel.GetData();
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync() {
            return base.Channel.GetDataAsync();
        }
        
        public int AddUser(string name) {
            return base.Channel.AddUser(name);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(string name) {
            return base.Channel.AddUserAsync(name);
        }
        
        public int AddCategory(string name) {
            return base.Channel.AddCategory(name);
        }
        
        public System.Threading.Tasks.Task<int> AddCategoryAsync(string name) {
            return base.Channel.AddCategoryAsync(name);
        }
        
        public int AddGood(string name) {
            return base.Channel.AddGood(name);
        }
        
        public System.Threading.Tasks.Task<int> AddGoodAsync(string name) {
            return base.Channel.AddGoodAsync(name);
        }
        
        public bool RemoveUser(int UserId) {
            return base.Channel.RemoveUser(UserId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserAsync(int UserId) {
            return base.Channel.RemoveUserAsync(UserId);
        }
        
        public bool RemoveCategory(int CatId) {
            return base.Channel.RemoveCategory(CatId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCategoryAsync(int CatId) {
            return base.Channel.RemoveCategoryAsync(CatId);
        }
        
        public bool RemoveGood(int GoodId) {
            return base.Channel.RemoveGood(GoodId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveGoodAsync(int GoodId) {
            return base.Channel.RemoveGoodAsync(GoodId);
        }
        
        public bool AddCatToUser(int UserId, int CatId) {
            return base.Channel.AddCatToUser(UserId, CatId);
        }
        
        public System.Threading.Tasks.Task<bool> AddCatToUserAsync(int UserId, int CatId) {
            return base.Channel.AddCatToUserAsync(UserId, CatId);
        }
        
        public bool AddGoodToUser(int UserId, int GoodId) {
            return base.Channel.AddGoodToUser(UserId, GoodId);
        }
        
        public System.Threading.Tasks.Task<bool> AddGoodToUserAsync(int UserId, int GoodId) {
            return base.Channel.AddGoodToUserAsync(UserId, GoodId);
        }
        
        public bool AddGoodToCat(int CatId, int GoodId) {
            return base.Channel.AddGoodToCat(CatId, GoodId);
        }
        
        public System.Threading.Tasks.Task<bool> AddGoodToCatAsync(int CatId, int GoodId) {
            return base.Channel.AddGoodToCatAsync(CatId, GoodId);
        }
        
        public bool AddCatToGood(int GoodId, int CatId) {
            return base.Channel.AddCatToGood(GoodId, CatId);
        }
        
        public System.Threading.Tasks.Task<bool> AddCatToGoodAsync(int GoodId, int CatId) {
            return base.Channel.AddCatToGoodAsync(GoodId, CatId);
        }
        
        public bool RemoveCatFromUser(int UserId, int CatId) {
            return base.Channel.RemoveCatFromUser(UserId, CatId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCatFromUserAsync(int UserId, int CatId) {
            return base.Channel.RemoveCatFromUserAsync(UserId, CatId);
        }
        
        public bool RemoveGoodFromUser(int UserId, int GoodId) {
            return base.Channel.RemoveGoodFromUser(UserId, GoodId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveGoodFromUserAsync(int UserId, int GoodId) {
            return base.Channel.RemoveGoodFromUserAsync(UserId, GoodId);
        }
        
        public bool RemoveGoodFromCat(int CatId, int GoodId) {
            return base.Channel.RemoveGoodFromCat(CatId, GoodId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveGoodFromCatAsync(int CatId, int GoodId) {
            return base.Channel.RemoveGoodFromCatAsync(CatId, GoodId);
        }
        
        public bool RemoveCatFromGood(int GoodId, int CatId) {
            return base.Channel.RemoveCatFromGood(GoodId, CatId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCatFromGoodAsync(int GoodId, int CatId) {
            return base.Channel.RemoveCatFromGoodAsync(GoodId, CatId);
        }
    }
}
